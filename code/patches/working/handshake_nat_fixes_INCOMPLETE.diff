Index: tools/master_server/src/main_master.cpp
===================================================================
--- tools/master_server/src/main_master.cpp	(revision 4561)
+++ tools/master_server/src/main_master.cpp	(working copy)
@@ -11,6 +11,8 @@
 #include <tchar.h>
 #endif
 
+VersionInfo g_version = VERSION_MASTER_SERVER;
+
 //------------------------------------------------------------------------------
 #ifdef _WIN32
     int _tmain(int argc, _TCHAR* argv[])
Index: tools/master_server/src/MasterServer.cpp
===================================================================
--- tools/master_server/src/MasterServer.cpp	(revision 4561)
+++ tools/master_server/src/MasterServer.cpp	(working copy)
@@ -78,7 +78,9 @@
     
 //------------------------------------------------------------------------------
 MasterServer::MasterServer() :
-    interface_(RakNetworkFactory::GetRakPeerInterface())    
+    interface_(RakNetworkFactory::GetRakPeerInterface()),
+    version_handshake_plugin_(new VersionHandshakePlugin(
+        AcceptVersionCallbackClient(this, &MasterServer::acceptVersionCallback)))
 {
     s_console.addFunction("listConnections",
                           ConsoleFun(this, &MasterServer::printConnections),
@@ -92,7 +94,11 @@
 
     
     interface_->SetMTUSize(s_params.get<unsigned>("network.mtu_size"));
-    interface_->SetUnreliableTimeout(UNRELIABLE_PACKET_TIMEOUT);    
+    interface_->SetUnreliableTimeout(UNRELIABLE_PACKET_TIMEOUT);
+
+
+    version_handshake_plugin_->performSuicideAfterConnect(false);
+    interface_->AttachPlugin(version_handshake_plugin_.get());
 }
 
 
@@ -100,6 +106,7 @@
 MasterServer::~MasterServer()
 {
     interface_->DetachPlugin(nat_plugin_.get());
+    interface_->DetachPlugin(version_handshake_plugin_.get());
     interface_->Shutdown(0);
     RakNetworkFactory::DestroyRakPeerInterface(interface_);
 }
@@ -263,7 +270,15 @@
     }
 }
 
+
 //------------------------------------------------------------------------------
+network::ACCEPT_VERSION_CALLBACK_RESULT MasterServer::acceptVersionCallback(const VersionInfo & version)
+{
+    return AVCR_ACCEPT;
+}
+
+
+//------------------------------------------------------------------------------
 /**
  *  Removes the given server from the server list after a certain
  *  timeout.
Index: tools/master_server/src/MasterServer.h
===================================================================
--- tools/master_server/src/MasterServer.h	(revision 4561)
+++ tools/master_server/src/MasterServer.h	(working copy)
@@ -12,6 +12,7 @@
 #include "ServerInfo.h"
 #include "RegisteredFpGroup.h"
 #include "Scheduler.h"
+#include "VersionHandshakePlugin.h"
 
 
 class RakPeerInterface;
@@ -117,6 +118,7 @@
 
     void handleNetwork(float dt);
 
+    network::ACCEPT_VERSION_CALLBACK_RESULT acceptVersionCallback(const VersionInfo & version);
     
     void autoRemove  (GameServer * server);
     void removeServer(void * address);
@@ -169,6 +171,8 @@
     std::map<SystemAddress, hTask> task_disconnect_;
 
     std::auto_ptr<NatPunchthrough> nat_plugin_;
+
+    std::auto_ptr<VersionHandshakePlugin> version_handshake_plugin_;
 };
 
 
Index: bluebeard/src/NetworkServer.cpp
===================================================================
--- bluebeard/src/NetworkServer.cpp	(revision 4561)
+++ bluebeard/src/NetworkServer.cpp	(working copy)
@@ -323,7 +323,11 @@
                                                                              VersionInfo & reported_version)
 {
     reported_version = g_version;
+
+    // accept any master server version
+    if (version.type_ == VERSION_MASTER_SERVER.type_) return AVCR_ACCEPT;
     
+    
     // accept only same game, same version, client
     VersionInfo cmp_version(tolower(g_version.type_), g_version.major_, g_version.minor_);
     if (cmp_version.type_ != version.type_) return AVCR_TYPE_MISMATCH;
Index: libs/network/src/VersionHandshakePlugin.h
===================================================================
--- libs/network/src/VersionHandshakePlugin.h	(revision 4561)
+++ libs/network/src/VersionHandshakePlugin.h	(working copy)
@@ -50,11 +50,12 @@
 class HandshakeInfo
 {
  public:
-    HandshakeInfo() : task_auto_close_(INVALID_TASK_HANDLE) {}
-    HandshakeInfo(hTask close_task) : task_auto_close_(close_task) {}
+    HandshakeInfo() : task_auto_close_(INVALID_TASK_HANDLE), incoming_connection_(false) {}
+    HandshakeInfo(hTask close_task, bool incoming) : task_auto_close_(close_task), incoming_connection_(incoming) {}
     
     VersionInfo info_;
     hTask task_auto_close_;
+    bool incoming_connection_;
 };
 
 
@@ -99,6 +100,8 @@
     virtual void OnShutdown(RakPeerInterface *peer);
     
     virtual PluginReceiveResult OnReceive(RakPeerInterface *peer, Packet *packet);
+
+    void performSuicideAfterConnect(bool b);
     
  protected:
 
@@ -120,7 +123,8 @@
     /// entry.
     std::map<SystemAddress, HandshakeInfo> handshake_info_;
     
-    bool server_side_;
+    bool suicide_; ///< only used on client side.
+    bool accept_callback_server_;
     AcceptVersionCallbackServer accept_version_server_;
     AcceptVersionCallbackClient accept_version_client_;
 
Index: libs/network/src/VersionInfo.h
===================================================================
--- libs/network/src/VersionInfo.h	(revision 4561)
+++ libs/network/src/VersionInfo.h	(working copy)
@@ -44,8 +44,6 @@
 
 const VersionInfo VERSION_RANKING_SERVER('R', 1, 0);
 
+const VersionInfo VERSION_MASTER_SERVER('M', 1, 0);
 
-// XXX rewrite master server to use handshake?
-// VersionInfo g_version_master_server("M", 1, 0);
-
 #endif
Index: libs/network/src/VersionHandshakePlugin.cpp
===================================================================
--- libs/network/src/VersionHandshakePlugin.cpp	(revision 4561)
+++ libs/network/src/VersionHandshakePlugin.cpp	(working copy)
@@ -22,7 +22,8 @@
 
 //------------------------------------------------------------------------------
 VersionHandshakePlugin::VersionHandshakePlugin(AcceptVersionCallbackServer cb) :
-    server_side_(true),
+    suicide_(false),
+    accept_callback_server_(true),
     accept_version_server_(cb),
     interface_(NULL)
 {
@@ -31,7 +32,8 @@
 
 //------------------------------------------------------------------------------
 VersionHandshakePlugin::VersionHandshakePlugin(AcceptVersionCallbackClient cb) :
-    server_side_(false),
+    suicide_(true),
+    accept_callback_server_(false),
     accept_version_client_(cb),
     interface_(NULL)    
 {
@@ -67,19 +69,7 @@
     switch (packet->data[0])
     {
     case ID_NEW_INCOMING_CONNECTION:
-    {
-        // Incoming connection to client - this doesn't concern us,
-        // ignore
-        if (!server_side_)
-        {
-            s_log << Log::warning
-                  << "Ignoring incoming connection from "
-                  << packet->systemAddress
-                  << " in VersionHandshakePlugin::OnReceive\n";
-            return RR_CONTINUE_PROCESSING;
-        }
-
-        
+    {        
         std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
         if (it != handshake_info_.end())
         {
@@ -88,6 +78,9 @@
             // handshake_info_ entry and pass it through.
             s_scheduler.removeTask(it->second.task_auto_close_, &fp_group_);
             handshake_info_.erase(it);
+            s_log << "erase "
+                  << packet->systemAddress
+                  << " in ID_NEW_INCOMING_CONNECTION\n";
             return RR_CONTINUE_PROCESSING;
         } else
         {
@@ -96,7 +89,7 @@
                   << packet->systemAddress
                   << "\n";
         
-            handshake_info_[packet->systemAddress] = HandshakeInfo(autoClose(packet->systemAddress));
+            handshake_info_[packet->systemAddress] = HandshakeInfo(autoClose(packet->systemAddress), true);
             
             return RR_STOP_PROCESSING_AND_DEALLOCATE;
         }
@@ -105,68 +98,76 @@
         
     case ID_DISCONNECTION_NOTIFICATION:
     case ID_CONNECTION_LOST:
-
-        s_log << Log::debug('n')
+    {
+        s_log// << Log::debug('n')
               << "lost connection to "
               << packet->systemAddress
               << "\n";
         
-        if (server_side_)
+        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+
+        // all packets for connected clients still are handled by
+        // this plugin, so only act if a handshake is still in
+        // progress.
+        if (it != handshake_info_.end())
         {
-            std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+            // remove autoclose task, or we might close a future
+            // connection that comes in from the same address.
+            s_scheduler.removeTask(it->second.task_auto_close_, &fp_group_);
+            handshake_info_.erase(it);
+            s_log << "erase in ID_DISCONNECTION_NOTIFICATION\n";
 
-            // all packets for connected clients still are handled by
-            // this plugin, so only act if a handshake is still in
-            // progress.
-            if (it != handshake_info_.end())
-            {
-                // remove autoclose task, or we might close a future
-                // connection that comes in from the same address.
-                s_scheduler.removeTask(it->second.task_auto_close_, &fp_group_);
-                handshake_info_.erase(it);
-            }
-        }
-        return RR_CONTINUE_PROCESSING;
-
+            return RR_STOP_PROCESSING_AND_DEALLOCATE;
+        } else return RR_CONTINUE_PROCESSING;
+    }
         
     case ID_CONNECTION_REQUEST_ACCEPTED:
-        
-        // Ignore this on server side - it's none of our business.
-        if (server_side_)
+    {
+        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+        if (it != handshake_info_.end())
         {
-            s_log << Log::warning
-                  << "Ignoring ID_CONNECTION_REQUEST_ACCEPTED from "
+            // This is the ID_CONNECTION_REQUEST_ACCEPTED we created
+            // ourselves upon successful version handshake. Remove
+            // handshake_info_ entry and pass it through.
+            s_scheduler.removeTask(it->second.task_auto_close_, &fp_group_);
+            handshake_info_.erase(it);
+            s_log << "erase in ID_CONNECTION_REQUEST_ACCEPTED\n";
+            return RR_CONTINUE_PROCESSING;
+        } else
+        {
+            s_log << Log::debug('n')
+                  << "new connection request accepted from "
                   << packet->systemAddress
-                  << " in VersionHandshakePlugin::OnReceive().\n";
-            return RR_CONTINUE_PROCESSING;
-        }
-
+                  << "\n";
         
-        // our suicide after successful version handshake will stop
-        // auto close.
-        autoClose(packet->systemAddress);
-        
-        sendVersionInfo(packet->systemAddress, g_version);
+            handshake_info_[packet->systemAddress] = HandshakeInfo(autoClose(packet->systemAddress), false);
 
-        s_log << Log::debug('n')
-              << "Sent version info "
-              << g_version
-              << " after connection request accepted from "
-              << packet->systemAddress
-              << "\n";
+            sendVersionInfo(packet->systemAddress, g_version);
+
+            s_log << Log::debug('n')
+                  << "Sent version info "
+                  << g_version
+                  << " after connection request accepted from "
+                  << packet->systemAddress
+                  << "\n";
         
-        return RR_STOP_PROCESSING_AND_DEALLOCATE;
-
+            return RR_STOP_PROCESSING_AND_DEALLOCATE;
+        }
+    }
+    
     case VHPI_VERSION_MISMATCH:
     case VHPI_TYPE_MISMATCH:
     {
         std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+        bool suicide = false;
         if (it != handshake_info_.end())
         {
+            suicide = it->second.incoming_connection_ == false;
             s_scheduler.removeTask(it->second.task_auto_close_, &fp_group_);
             handshake_info_.erase(it);
+            s_log << "erase in VHPI_TYPE_MISMATCH\n";
         }
-        suicideIfNeccessary();
+        if (suicide) suicideIfNeccessary();
         
         return RR_CONTINUE_PROCESSING;
     }
@@ -185,10 +186,21 @@
             return RR_STOP_PROCESSING_AND_DEALLOCATE;
         }
 
+        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+        if (it == handshake_info_.end())
+        {
+            s_log << Log::warning
+                  << "received unexpected VHPI_VERSION_INFO_INTERNAL from "
+                  << packet->systemAddress
+                  << "\n";
+            return RR_STOP_PROCESSING_AND_DEALLOCATE;
+        }
+        
 
+
         ACCEPT_VERSION_CALLBACK_RESULT res;
         VersionInfo our_reported_version;
-        if (server_side_)
+        if (accept_callback_server_)
         {
             res = accept_version_server_(info, our_reported_version);
         } else
@@ -223,34 +235,20 @@
             
             peer->CloseConnection(packet->systemAddress, true);
 
-            suicideIfNeccessary();
-            return RR_STOP_PROCESSING_AND_DEALLOCATE;
-        }
-        
-        if (server_side_)
+            if (!it->second.incoming_connection_) suicideIfNeccessary();
+
+        } else if (it->second.incoming_connection_)
         {
-            std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
-            if (it != handshake_info_.end())
-            {
-                // remember version, send response
-                it->second.info_ = info;
-                sendVersionInfo(packet->systemAddress, our_reported_version);
+            // remember version, send response
+            it->second.info_ = info;
+            sendVersionInfo(packet->systemAddress, our_reported_version);
 
-                s_log << Log::debug('n')
-                      << "Sent version info "
-                      << our_reported_version
-                      << " to "
-                      << packet->systemAddress
-                      << "\n";
-            } else
-            {
-                s_log << Log::warning
-                      << "received unexpected VHPI_VERSION_INFO_INTERNAL from "
-                      << packet->systemAddress
-                      << "\n";
-            }
-
-            return RR_STOP_PROCESSING_AND_DEALLOCATE;
+            s_log << Log::debug('n')
+                  << "Sent version info "
+                  << our_reported_version
+                  << " to "
+                  << packet->systemAddress
+                  << "\n";
         } else
         {
             sendVersionAck(packet->systemAddress);
@@ -275,29 +273,29 @@
             // ID_CONNECTION_REQUEST_ACCEPTED which we just pushed. It
             // will also terminate autoClose.
             suicideIfNeccessary();
+        }
 
-            return RR_STOP_PROCESSING_AND_DEALLOCATE;
-        }
+        return RR_STOP_PROCESSING_AND_DEALLOCATE;
     }
     case VHPI_VERSION_ACK:
     {
-        if (!server_side_)
+        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+        if (it == handshake_info_.end()) 
         {
             s_log << Log::warning
-                  << "Ignoring VHPI_VERSION_ACK from "
+                  << "Ignoring VHPI_VERSION_ACK from unknown peer "
                   << packet->systemAddress
-                  << " in VersionHandshakePlugin::OnReceive().\n";
-            return RR_CONTINUE_PROCESSING;
+                  << ".\n";
+            return RR_STOP_PROCESSING_AND_DEALLOCATE;
         }
-        
-        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
-        if (it == handshake_info_.end()) 
+
+        if (!it->second.incoming_connection_)
         {
             s_log << Log::warning
-                  << "Ignoring VHPI_VERSION_ACK from unknown peer "
+                  << "Ignoring unexpected VHPI_VERSION_ACK from "
                   << packet->systemAddress
                   << ".\n";
-            return RR_CONTINUE_PROCESSING;
+            return RR_STOP_PROCESSING_AND_DEALLOCATE;
         }
 
         s_log << Log::debug('n')
@@ -324,28 +322,35 @@
     default:
 
         // always let through basic system messages.
-        if (packet->data[0] <= ID_PONG) return RR_CONTINUE_PROCESSING;
+        if (packet->data[0] < ID_USER_PACKET_ENUM) return RR_CONTINUE_PROCESSING;
 
-        if (!server_side_)
+        // only block messages from peers currently performing
+        // handshake.
+        std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
+        if (it != handshake_info_.end())
         {
-            // on client, block all user messages
             return RR_STOP_PROCESSING_AND_DEALLOCATE;
         } else
         {
-            // on server, only block messages from peers currently
-            // performing handshake.
-            std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(packet->systemAddress);
-            if (it != handshake_info_.end()) return RR_STOP_PROCESSING_AND_DEALLOCATE;
-            else return RR_CONTINUE_PROCESSING;
-        } 
+            return RR_CONTINUE_PROCESSING;
+        }
     }
 }
 
 
 //------------------------------------------------------------------------------
+void VersionHandshakePlugin::performSuicideAfterConnect(bool b)
+{
+    suicide_ = b;
+}
+
+
+//------------------------------------------------------------------------------
 void VersionHandshakePlugin::suicideIfNeccessary()
 {
-    if (!server_side_)
+    return;
+    
+    if (suicide_)
     {
         interface_->DetachPlugin(this);
         delete this;
@@ -437,10 +442,14 @@
     // Shouldn't be called on server if handshake was successfully
     // completed.
     std::map<SystemAddress, HandshakeInfo>::iterator it = handshake_info_.find(address);
-    assert(!server_side_ || it != handshake_info_.end());
+//    assert(!server_side_ || it != handshake_info_.end());
 
     // Remove entry for this handshake.
-    if (it != handshake_info_.end()) handshake_info_.erase(it);
+    if (it != handshake_info_.end())
+    {
+        s_log << "erase in closeConnection\n";
+        handshake_info_.erase(it);
+    }
 
     s_log << Log::warning
           << "Closing connection to "
Index: libs/master/src/MasterServerPunchthrough.cpp
===================================================================
--- libs/master/src/MasterServerPunchthrough.cpp	(revision 4561)
+++ libs/master/src/MasterServerPunchthrough.cpp	(working copy)
@@ -95,8 +95,7 @@
             peer->CloseConnection(packet->systemAddress, true);
         } else
         {
-            s_log << Log::debug('m')
-                  << "incoming facilitator connection: "
+            s_log << "incoming facilitator connection: "
                   << packet->systemAddress.ToString()
                   << ", trying to connect to "
                   << target_server_address_.ToString()
Index: games/tank/src/TankAppClient.cpp
===================================================================
--- games/tank/src/TankAppClient.cpp	(revision 4561)
+++ games/tank/src/TankAppClient.cpp	(working copy)
@@ -400,14 +400,15 @@
         throw Exception(text);
     }
 
+    interface_->AttachPlugin(new VersionHandshakePlugin(
+                                 AcceptVersionCallbackClient(this, &TankApp::acceptVersionCallback)));
+
     // punch plugin will commit suicide.
     master::MasterServerPunchthrough * punch = new master::MasterServerPunchthrough();
     punch->FacilitateConnections(false);
     interface_->AttachPlugin(punch);
     punch->connect(address, internal_port);
 
-    interface_->AttachPlugin(new VersionHandshakePlugin(
-                                 AcceptVersionCallbackClient(this, &TankApp::acceptVersionCallback)));
 }
 
 
@@ -794,6 +795,9 @@
 //------------------------------------------------------------------------------
 network::ACCEPT_VERSION_CALLBACK_RESULT TankApp::acceptVersionCallback(const VersionInfo & version)
 {
+    // accept any master server version
+    if (version.type_ == VERSION_MASTER_SERVER.type_) return AVCR_ACCEPT;
+    
     // accept only same game, same version, server or client
     // (dedicated server has uppercase, client has lowercase version)
     VersionInfo cmp_version(toupper(g_version.type_), g_version.major_, g_version.minor_);
